{"pages":[{"title":"About","date":"2020-03-16T07:54:13.553Z","path":"about/index.html","text":""},{"title":"Categories","date":"2020-03-16T07:54:13.553Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2020-03-16T07:54:13.553Z","path":"tags/index.html","text":""}],"posts":[{"title":"借助云服务器实现hexo全自动部署","date":"2020-03-15T14:36:10.000Z","path":"wiki/博客篇/借助云服务器实现hexo全自动部署/","text":"本文内容分为如下几部分： 云服务器安装hexo 实现与云服务器的文件实时同步 云服务器定时部署到github page 想法大概是这样的 云服务器安装Hexo安装git和Node.JS首先通过ssh连接到云服务器，具体操作自行百度 我这里使用的云服务器系统是Ubuntu Linux系统，所以本文以Ubuntu Linux为例进行讲解 Ubuntu Linux默认自带git，所以我们还需要自行安装一下Node.JS： 12345678$ wget https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz$ tar -xvf node-v12.16.1-linux-x64.tar.xz $ sudo mv node-v12.16.1-linux-x64 /usr/local/node-v12$ sudo ln -s /usr/local/node-v12/bin/node /bin/node$ sudo ln -s /usr/local/node-v12/bin/npm /bin/npm# 可使用如下命令检测node是否安装成功$ node -v$ npm -v 安装Hexo1234$ npm install -g hexo-cli$ sudo ln -s /usr/local/node-v12/bin/hexo /bin/hexo# 检测hexo是否安装成功$ hexo -v 运行Hexo我们需要先初始化一个hexo目录 1$ hexo init &lt;floder name&gt; 初始化完成后，文件夹结构如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中_config.yml为站点配置文件，themes为主题文件目录 要运行hexo,在hexo的目录下使用如下命令即可： 123$ hexo server# 或者$ hexo s 启动服务器后，默认在4000端口启动web服务，此时访问&lt;ip&gt;:4000即可访问到当前hexo站点，此时站点里默认会有一篇快速入门的文章帮助你快速熟悉hexo的使用 想将自己的hexo博客设置成wiki样式，可参考我的上篇文章《使用hexo搭建wiki》进行配置 将本地配置好的wiki移动到云服务器将本地配置好的服务器打包，上传到云服务器，然后解压即可直接使用 实现到云服务器之间的文件实时同步为了方便我们写文章在本地保存完就直接同步到服务器上，我们可以想办法实现一下文件实时同步，将本地文件夹的修改实时同步到云服务器上，这里有一个现成的解决方案：使用坚果云实时同步文件夹。 这里我们使用坚果云软件，我们的主机上下载好坚果云软件，注册登录，建立一个同步文件夹，这里操作很无脑，就不演示了，接下来讲讲没有图形界面的Linux命令行如何同步坚果云： 坚果云提供WebDav接口，这里可以使用davfs工具去挂载WebDav目录 WebDav: davfs: 安装davfs21$ sudo apt install davfs2 配置&amp;挂载davfs2编辑配置文件/etc/davfs2/davfs2.conf，找到如下内容将注释去掉，将0改成1 1# ignore_dav_header 0 编辑配置文件/etc/davfs2/secrets，在配置文件最后添加如下内容： 1https:&#x2F;&#x2F;dav.jianguoyun.com&#x2F;dav 你的坚果云账户 你的webdav应用密码 坚果云WebDav应用密码获取方式： 坚果云官网登录你的坚果云账号 依次点击账户信息—安全选项，即可看到添加WebDav应用的按钮 点击添加应用，名称随意输入，然后就会自动生成一个密码 然后进行挂载 1$ sudo mount.davfs https://dav.jianguoyun.com/dav 你想要挂载的目录 接下来访问该目录即可发现目录里的内容已经和我们坚果云账号创建的实时同步文件夹同步了 接下来，我们将我们的hexo主目录source文件下的_post目录放到我们的坚果云实时同步文件夹下，然后在云服务器软链接（ln -s）到云服务器hexo目录的该位置即可，过于简单就不演示了 到此为止，我们在本地写完文章保存后，云服务器会自动同步文章，接下来在云服务器后台启动hexo s即可实时展示博客更新的内容了： 12$ cd 你的hexo的目录$ nohup /bin/hexo server &gt;&gt; ~/hexo.log 2&gt;&amp;1 &amp; 命令含义详见参考资料 通过脚本生成新的文章模板每次创建新的文章都需要通过命令hexo new name进行，hexo程序为我们生成一个文章模板，但是如果我想只在远程服务器上安装hexo，不想在本地安装hexo呢，这里我们通过一个脚本来实现hexo new的功能，这样即使本地没有hexo，也能写hexo的文章，这里直接给出代码了： 1待补充 通过脚本和命令实现全自动化部署到Github Page为了全自动部署到Github Page，我们可以使用Linux的定时任务，比如每天晚上12点进行一次部署，部署的命令我们写成脚本方便一键执行，这样一来，我们只需要写完内容，然后保存，就能全自动部署到我们的博客上了，而且我们可以在任何机器上写文章，甚至不需要安装任何环境，非常方便。 配置云服务器ssh秘钥连接github生成ssh秘钥 1$ ssh-keygen -t rsa -C \"github邮箱账号\" 找到生成的秘钥，将公钥内容复制，在github上个人设置–SSH and GPG keys–New SSH key添加秘钥 参考资料 备份Linux操作系统的数据到坚果云的方法 搭建 Node.js 环境 linux shell中”2&gt;&amp;1”含义 nohup和&amp;后台运行，进程查看及终止","tags":[],"categories":[{"name":"博客篇","slug":"博客篇","permalink":"http://kn0sky.com/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}]},{"title":"Linux命令行使用davfs挂载webdav目录","date":"2020-03-15T14:27:31.000Z","path":"wiki/计算机基础操作篇/Linux系统下/Linux命令行使用davfs挂载webdav目录/","text":"Linux命令行使用davfs挂载webdav目录davfs安装： 1$ sudo apt install davfs2 https://ywnz.com/linuxjc/3362.html WebDAV参考资料","tags":[],"categories":[{"name":"计算机基础操作篇","slug":"计算机基础操作篇","permalink":"http://kn0sky.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AF%87/"},{"name":"Linux系统下","slug":"计算机基础操作篇/Linux系统下","permalink":"http://kn0sky.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AF%87/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B/"}]},{"title":"主页","date":"2020-03-14T07:02:32.000Z","path":"wiki/index/","text":"Todo博客篇 《借助云服务器实现hexo全自动部署》 《使用hexo搭建个人wiki》 计算机基础操作篇 整理之前博客里的文章 《我的常用站点统计》 ProcessOn","tags":[],"categories":[]},{"title":"Windows系统下进行屏幕扩展","date":"2020-03-13T10:38:51.000Z","path":"wiki/计算机基础操作篇/Windows系统下/屏幕扩展/Windows屏幕扩展/","text":"Windows系统下进行屏幕扩展多屏幕协同工作可以有效提高工作效率，在一定程度上摆脱窗口反复切换的问题，下面将分别介绍常规和非常规的解决方案。 常规解决方案最常规的方法是整一个显示设备（显示器、投影仪等），HDMI线缆连接，然后显示设置里选择扩展屏幕（也有复制选项） 非常规解决方案通过局域网使用手机/平板/其他Windows电脑进行屏幕扩展这里需要通过spacedesk软件实现，下载地址参考：spacedesk官网 软件分为主机端和扩展端，主机端只能是Windows系统，扩展端可以是Android、Windows、iOS等 软件的安装较为无脑，直接点下一步即可，这里不多啰嗦，Android端apk打不开Google Play商店可通过其他下载站进行下载，例如Freeapk 软件安装完之后，主机和用于扩展屏幕的设备需处于同一局域网下，主机端打开软件，扩展端也打开软件，扩展端会直接在局域网内搜索主机，然后选中要使用扩展的主机即可 PS： Windows系统查看 IP 地址可通过 cmd 命令进行查询： 快捷键Windows + R打开运行 输入 cmd 敲击回车，弹出黑框框 输入ipconfig命令敲击回车，即可查询当前IP 注意：如果手机和电脑分辨率不一样会导致扩展屏的使用体验很糟糕！","tags":[],"categories":[{"name":"计算机基础操作篇","slug":"计算机基础操作篇","permalink":"http://kn0sky.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AF%87/"},{"name":"Windows系统下","slug":"计算机基础操作篇/Windows系统下","permalink":"http://kn0sky.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AF%87/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B/"},{"name":"屏幕扩展","slug":"计算机基础操作篇/Windows系统下/屏幕扩展","permalink":"http://kn0sky.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AF%87/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B/%E5%B1%8F%E5%B9%95%E6%89%A9%E5%B1%95/"}]},{"title":"使用hexo搭建个人wiki","date":"2020-03-12T11:38:51.000Z","path":"wiki/博客篇/使用hexo搭建wiki/","text":"Hexo及其环境的安装安装Hexo需要Node.js和Git环境，Hexo安装方法和过程参考官方文档 初始化hexo文件夹：1$ hexo init &lt;floder_name&gt; 初始化完成后，文件夹结构如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中_config.yml为站点配置文件，themes为主题文件目录 hexo的快速入门创建新文章1$ hexo new \"My New Post\" More info: Writing 运行服务器1$ hexo server More info: Server 生成静态文件1$ hexo generate More info: Generating 部署到远程站点1$ hexo deploy More info: Deployment PS：Hexo建站各种基本使用方法请参考官方文档 Hexo安装Wikitten主题：PS:这里主题使用相关内容均来自Wikitten主题的文档 安装过程如下： 进入你的hexo文件夹，将主题克隆到themes/路径下 12$ cd your-hexo-directory$ git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten 覆盖站点目录中的默认页面模板 12$ cp -rf themes/Wikitten/_source/* source/$ cp -rf themes/Wikitten/_scaffolds/* scaffolds/ 重命名主题中的 _config.yml.example 到 _config.yml，然后可以使用配置文件配置主题 123$ cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml# 编辑配置文件，定制你的配置项$ vim themes/Wikitten/_config.yml 安装插件 12345hexo-autonofollow // 打开非本站链接时自动开启新标签页hexo-directory-category // 根据文章文件目录自动为文章添加分类hexo-generator-feed // 生成 RSS 源hexo-generator-json-content // 生成全站文章 json 内容，用于全文搜索hexo-generator-sitemap // 生成全站站点地图 sitemap 安装命令： 1$ npm i -S hexo-autonofollow hexo-directory-category hexo-generator-feed hexo-generator-json-content hexo-generator-sitemap 到这里我们的个人wiki版的hexo站点已经可以运行了，接下来我们需要做一些定制化的配置： 添加插件的配置内容：向站点配置文件（hexo根目录下的_config.yml文件）最后添加如下内容 123456789101112131415161718192021222324252627282930313233## Markdown## https://github.com/hexojs/hexo-renderer-markedmarked: gfm: true ## Plugins: https://hexo.io/plugins/### JsonContentjsonContent: meta: false pages: title: true date: true path: true text: true posts: title: true date: true path: true text: true tags: true categories: true ignore: - 404.html ### Creat sitemapsitemap: path: sitemap.xml### Adds nofollow attribute to all external links in your hexo blog posts automatically.nofollow: enable: true exclude: - &lt;your site url domain&gt; # eg: zthxxx.me 到这里，我们的wikitten主题的hexo站点已经成功搭建完成 一些个人定制化配置（可选）修改代码块颜色这个主题启用之后，默认代码块的背景颜色是黑色，纯白色的背景配纯黑的代码块背景颜色有点看着不舒服，所以我想将代码块颜色进行修改。 找到主题配置文件找到如下行： 1highlight: monokai 将monokai改成自己想要的主题即可，本站使用的风格是`` PS：可用主题名称可于Wikitten/source/css/_highlight目录下找到，highlightjs网站可进行在线预览。 启用资源文件夹编写.md格式文档过程中，图片的插入是个问题，我们可以引用外部链接，也可以使用本地图片，如果不想使用远程图床的话，这里启用资源文件夹更加便于在文档中插入图片 在站点配置文件夹中，找到如下配置选项，将false改为true即可 1post_asset_folder: false 接下来使用命令(hexo new title)创建新文档的时候，就会自动创建一个资源文件夹 PS：由于之前开启了自动以文件夹来创建分类，所以我们使用资源文件夹的时候，文件夹里不要出现.md文件，不然文件夹也会被认为是一个文章分类 部署到Github Page手动部署这里有两个地方要操作，一个是github，一个是本地配置文件 github创建github page仓库 创建github账号 创建个人仓库，仓库名为用户名.github.io 配置部署到github 安装 hexo-deployer-git 1$ npm install hexo-deployer-git --save 编辑站点配置文件，找到如下内容： 1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: '' 按照如下格式进行修改： 1234deploy: type: git repo: &lt;repository url&gt; branch: master repo：github仓库的url（例如:https://github.com/username/username.github.io.git） branch：分支名称(一般是master) 然后使用如下命令进行部署 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 命令执行完成后会提示你输入github账号密码，输入完即完成了提交 接下来可从username.github.io访问到自己的博客了 免密码部署设置 创建SSH密匙 1ssh-keygen -t rsa -C \"GitHub 邮箱\" 复制公钥（生成的.pub的文件）的内容到github–setting–SSH and GPG keys中（标题随便起） 修改站点配置文件，将前面我们的repo改成ssh地址，格式例如： 1234deploy: type: git repository: git@github.com:myname/myname.github.io.git branch: master 然后我们再次使用hexo d进行部署，就不再需要我们填写用户名和密码了 使用脚本一键部署每次部署都需要三条命令，过于麻烦，我们可以写个脚本将三条命令进行简化 以下脚本均放在站点主目录下 shell脚本 12#!&#x2F;bin&#x2F;bashhexo clean &amp;&amp; hexo g &amp;&amp; hexo d python脚本 12345#!/usr/bin/python3import osos.system('hexo clean')os.system('hexo g')os.system('hexo d') 设置自定义域名我们也可以使用我们自己的域名来访问我们的博客，首先，我们需要先注册一个域名（比如，可以去腾讯云注册） 然后在我们博客的github仓库设置自定义域名为我们想要访问解析的域名，同时在我们注册域名的地方设置CNAME解析地址为:username.github.io. 稍等片刻即可通过自定义域名访问博客了 不过这里会出现一个问题就是每次部署都会导致CNAME信息需要重新设置，这里我们需要在站点主目录的source目录下创建个CNAME文件，里面写上自己要解析的地址即可 自动化部署到Github Page 使用Travis CI 将 Hexo 博客部署到 GitHub Pages 上可实现自动化部署，只需要我们将站点文件push到github上，即可自动部署成博客 如果不希望自己的站点文件公开的话，还是建议使用上面的手动部署方法 详细教程请参考hexo相关文档 More info: deploy to github page 参考资料 Hexo-Theme-Wikitten中文文档 Hexo文档","tags":[],"categories":[{"name":"博客篇","slug":"博客篇","permalink":"http://kn0sky.com/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}]}]}